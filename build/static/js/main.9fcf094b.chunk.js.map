{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","domain","str","parseInt","toString","replace","this","push","forEach","element","index","setTimeout","document","getElementById","innerText","domainsorgu","fetch","then","response","ok","node","createElement","textnode","createTextNode","appendChild","className","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAGqBA,G,wDAEnB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,OAAQ,IAHE,E,gEAUZ,IAHmB,IAAD,OACdC,EAAM,OAEK,SAARA,GACLA,GAAQC,SAASD,EAAK,IAAM,GAAGE,SAAS,IAAKC,QAAQ,KAAM,KAC3DC,KAAKN,MAAMC,OAAOM,KAAKL,GAGzBI,KAAKN,MAAMC,OAAOO,SAAQ,SAACC,EAASC,GAClCC,YAAW,WACTC,SAASC,eAAe,WAAWC,UAAYL,EAAU,OACzD,EAAKM,YAAYN,KAChB,KAAOC,EAAQ,S,kCAIVR,GACVc,MAAM,2CAA6Cd,EAAM,QACtDe,MAAK,SAAAC,GACJ,IAAoB,IAAhBA,EAASC,GAAc,CAEzB,IAAIC,EAAOR,SAASS,cAAc,KAC9BC,EAAWV,SAASW,eAAe,oBAAsBrB,EAAM,QACnEkB,EAAKI,YAAYF,GACjBV,SAASC,eAAe,cAAcW,YAAYJ,S,+BAMxD,OACE,yBAAKK,UAAU,OACb,4BAAQA,UAAU,cAChB,uBAAGC,GAAG,YAEN,uBAAGA,GAAG,cAAN,sB,GA5CuBC,cCSbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASC,eAAe,SDyHpB,kBAAmBuB,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9fcf094b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nexport default class App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      domain: []\n    }\n  }\n\n  componentDidMount() {\n    var str = 'aaaa';\n\n    while (str !== 'zzzz') {\n      str = ((parseInt(str, 36) + 1).toString(36)).replace(/0/g, '0'); // 0 yerine a yazılırsa alfabetik oluşur \n      this.state.domain.push(str);\n    };\n\n    this.state.domain.forEach((element, index) => {\n      setTimeout(() => {\n        document.getElementById(\"denenen\").innerText = element + '.com';\n        this.domainsorgu(element);\n      }, 300 * (index + 1))\n    });\n  }\n\n  domainsorgu(str) {\n    fetch('https://rdap.verisign.com/com/v1/domain/' + str + '.com')\n      .then(response => {\n        if (response.ok === false) {\n          //console.log(str + '.com');\n          var node = document.createElement(\"p\");\n          var textnode = document.createTextNode(\"Bulunan Domain : \" + str + \".com\");\n          node.appendChild(textnode);\n          document.getElementById(\"domainlist\").appendChild(node);\n        }\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p id=\"denenen\">\n          </p>\n          <p id=\"domainlist\">\n            Domain Query\n          </p>\n        </header>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}